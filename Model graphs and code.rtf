{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww15560\viewh9700\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 \
\
# Graphs for TSE Modeling paper\
library(lavaan)\
library(semPlot)\
set.seed(12345)\
\
\
model.zero <- '\
Adherence =~ PracticeAdherence\
Criticality =~ ContextFactors\
Outcomes =~ SecurityOutcomes\
Outcomes ~ Criticality + Adherence\
Criticality ~~  Adherence'\
semzero <- simulateData(model.zero,sample.nobs=8L)\
semPaths(sem(model.zero,data=semzero),,"std",title=FALSE,sizeLat=20,nCharNodes=15,residuals=FALSE,intercepts=FALSE,layout="spring",structural=TRUE)\
\
# For paper\
semPaths(sem(model.zero,data=semzero),,"std",title=FALSE,sizeLat=20,nCharNodes=15,residuals=FALSE,intercepts=FALSE,layout="spring",structural=TRUE,filetype="png\'94,filename="modelzero",height=2,width=3)\
\
model.mini <- \
'\
Criticality =~ logSLOC + logChurn + logUsage + logDevs + Age + RiskIndex\
Adherence =~ SpecAdherence + CodeAdherence + TestAdherence + OpsAdherence\
CVE ~ Adherence + Criticality \
'\
semmini <- simulateData(model.mini,sample.nobs=500L)\
semPaths(sem(model.mini,data=semsim),,"std",title=FALSE,layout="tree",sizeLat=3,sizeMan=3,nCharNodes=5,structural=FALSE)\
\
\
spef.pma.model <- \
'Performance =~ VRE + Vdensity\
Need =~ SLOC + Churn + Devs +  Machines + Identities\
Effort =~   PSR + ASR + ATM + DTS + ADCS + POG + IDP + ASCS + PSR + ASR + ATM + DTS + PPT + TV + AST + PST + Devs\
PPT =~ PPTAE \
TV =~ TVAE + TVAI\
AST =~  ASTAE + ASTAI\
PST =~ PSTAE + PSTAI \
ASCS =~ ASCSAE + ASCSAI\
PSR =~ PSRAE + PSRAI\
ASR =~ ASRAE + ASRAI\
ATM =~ ATMAE + ATMAI\
DTS =~ DTSAE + DTSAI \
ADCS =~ ADCSAE + ADCSAI\
POG =~ POGAE + POGAI\
IDP =~ IDPAE + IDPAI\
\
Performance ~~ Need\
Performance ~~ Effort\
Need ~~ Effort\
'\
        \
semsim <- simulateData(spef.pma.model,sample.nobs=500L)\
\
semPaths(sem(spef.pma.model,data=semsim),,"std",title=FALSE,layout="tree",sizeLat=3,sizeMan=3,nCharNodes=5,structural=FALSE)\
\
\
# Attempt at simple SEM example for constructs\
\
 boadata <- read.csv("/Users/admin/Dropbox/NCSU/DissertationResearch/FSE 2016/cii_results_SPEF_semtest.csv")\
\
boadata$logSLOC <- log(boadata$SLOC)\
boadata$logChurn <- log(boadata$Churn+1)\
boadata$logUsage <- log(boadata$Usage)\
boadata$logDevs <- log(boadata$Devs+1)\
boadata$logDevChurnAdh <- log(boadata$Devs/(boadata$Churn+1))\
boadata$DevChurnAdh <- boadata$Devs/(boadata$Churn+1)\
\
model.mini <- '\
Adherence =~ logDevChurnAdh\
Criticality =~ RiskIndex \
Outcomes =~ CVE\
Outcomes ~ Criticality + Adherence\
Criticality ~~ Adherence'\
\
fit <- sem(model.mini,data=boadata)\
summary(fit,standardized=TRUE)\
fitMeasures(fit,c("chisq","rmsea","cfi","srmr","aic","nfi","tli"))\
semPaths(fit,"std",title=FALSE,layout="tree",sizeLat=3,sizeMan=3,nCharNodes=5,structural=FALSE)\
resid(fit, type = "standardized")\
\
\
# Another attempt at spef_sim_adapted\
\
spef.model.hacked <- \
'\
Outcomes =~  CVE \
Criticality =~ Outcomes + Churn + Usage\
Criticality =~ Adherence\
System =~ Outcomes + POGAC + TVAC\
Release =~ PSRAC + DTSAC + POGAC + TVAC + ASTAC\
Source =~ PSRAC + DTSAC  + TVAC + IDPAC + ASCSAC\
Design =~ PSRAC + ASRAC + ADCSAC + IDPAC\
Adherence =~ PSTAC + SecurityRelated + Release + Source + Design + SLOC + Devs\
Design =~ Source\
Source =~ Release\
Release =~ System\
PSRAC ~~ IDPAC + ASRAC + ADCSAC\
ASRAC ~~ ADCSAC + TVAC\
DTSAC ~~ ASCSAC\
ADCSAC ~~ POGAC\
IDPAC ~~ PSTAC\
ASCSAC ~~ ASTAC + PSTAC + TVAC\
TVAC ~~ PSTAC\
'\
\
set.seed(12345)\
semsim <- simulateData(spef.model.hacked,sample.nobs=500L)\
\
semPaths(sem(spef.model.hacked,data=semsim),"col",title=FALSE,layout="tree",sizeLat=5,sizeMan=5,nCharNodes=20,structural=FALSE)\
\
\
#semPaths(sem(spef.model.complete,data=semsim),"col",title=FALSE,layout="tree",sizeLat=5,sizeMan=5,nCharNodes=12,structural=FALSE,filet# ype="png",filename="spef_sem_adapted",height=3,width=7)\
\
\
\
# I don\'92t know what this stuff is, but it looks like a bigger octopus\
\
model.CAO.SCTO <- \
'\
Environmental =~ Methodology + Domain \
Standard =~ SLOC + TeamSize \
SecuritySpecific =~ Churn + Language + Usage\
\
SpecAdherence =~ ASR + IDP + PSTR + ADCS + PTM + POG\
CodeAdherence =~ DTS + ASCS + AST + PSR\
TestAdherence =~  PST + PPT + AST + PSR\
OpsAdherence =~ PTM + POG + TV\
Adherence =~ SpecAdherence + CodeAdherence + TestAdherence + OpsAdherence\
Criticality =~ Environmental + Standard + SecuritySpecific\
Outcomes =~ CVE + VRE + PVE \
Outcomes ~ Adherence + Criticality \
'\
semscto <- simulateData(model.CAO.SCTO,sample.nobs=500L)\
semPaths(sem(model.CAO.SCTO,data=semscto),,"std",title=FALSE,layout="spring",sizeLat=10,sizeMan=5,nCharNodes=15,residuals=FALSE,intercepts=TRUE,structural=TRUE)\
\
model.CAO.SCTO <- \
' \
# measurement model\
StandardContext =~ SLOC + TeamSize\
SecuritySpecificContext =~ Churn + Language + Usage\
Adherence =~ ASR + IDP + PSTR + ADCS + PTM + POG + DTS + ASCS + AST + PSR + PST + PPT + TV \
Outcomes =~ CVE + VRE + PVE \
# regressions\
Outcomes ~ SecuritySpecificContext\
Outcomes ~ StandardContext\
Outcomes ~ Adherence\
# residual correlations\
Adherence ~~ SecuritySpecificContext\
Adherence ~~ StandardContext\
StandardContext ~~ SecuritySpecificContext\
'\
semscto <- simulateData(model.CAO.SCTO,sample.nobs=230L)\
semPaths(sem(model.CAO.SCTO,data=semscto),,"std",title=FALSE,layout="tree",sizeLat=10,sizeMan=5,nCharNodes=20,residuals=FALSE,intercepts=TRUE,structural=TRUE,orthogonal=TRUE,std.lv=TRUE)\
\
\
\
model.large.CAO.SCTO.SPEF <- \
'\
# measurement model\
SpecAdherence =~ ASR + IDP + PSTR + ADCS + PTM + POG\
CodeAdherence ~ DTS + ASCS + AST + PSR\
TestAdherence ~  PST + PPT + AST + PSR\
OpsAdherence ~ PTM + POG + TV\
SpecOutcomes =~ SpecCriticality + SpecAdherence\
CodeOutcomes =~ CodeCriticality + CodeAdherence\
TestOutcomes =~ TestCriticality + TestAdherence\
OpsOutcomes =~ OpsCriticality + OpsAdherence\
'\
\
\
model.large.CAO.SCTO.SPEF <- \
'\
SpecCriticality =~ Domain\
SpecAdherence =~ PTM\
CodeCriticality =~ Language\
CodeAdherence =~  ASCS\
TestCriticality =~ X\
TestAdherence =~ PST\
OpsCriticality =~ Usage\
OpsAdherence =~ POG\
\
CodeCriticality =~ CodeOutcomes\
CodeAdherence =~ CodeOutcomes\
SpecOutcomes =~ SpecCriticality + SpecAdherence\
TestOutcomes =~ TestCriticality + TestAdherence\
OpsOutcomes =~ OpsCriticality + OpsAdherence\
'\
\
model.zero <- '\
Adherence =~ PracticeAdherence\
Criticality =~ ContextFactors\
Outcomes =~ SecurityOutcomes\
Outcomes ~ Criticality + Adherence\
Criticality ~  Adherence'\
\
\
model.one <- '\
SpecAdherence =~ SpecPracticeAdherenceMeasures\
CodeAdherence =~ CodePracticeAdherenceMesures\
TestAdherence =~ TestPracticeAdherenceMeasures\
OpsAdherence =~ OpsPracticeAdherenceMeasures\
Adherence ~ SpecAdherence + CodeAdherence + TestAdherence + OpsAdherence\
SpecCriticality =~ SpecContextFactors\
CodeCriticality =~ CodeContextFactors\
TestCriticality =~ TestContextFactors\
OpsCriticality =~ OpsContextFactors\
Criticality ~ SpecCriticality + CodeCriticality + TestCriticality + OpsCriticality\
SpecOutcomes =~ SpecSecurityOutcomes\
CodeOutcomes =~ CodeSecurityOutcomes\
TestOutcomes =~ TestSecurityOutcomes\
OpsOutcomes =~ OpsSecurityOutcomes\
Outcomes ~ SpecOutcomes + CodeOutcomes + TestOutcomes + OpsOutcomes\
Outcomes ~ Criticality + Adherence\
Criticality ~  Adherence'\
\
\
 model.one <- '\
SpecAdherence =~ SpecPracticeAdherenceMeasures\
CodeAdherence =~ CodePracticeAdherenceMesures\
TestAdherence =~ TestPracticeAdherenceMeasures\
OpsAdherence =~ OpsPracticeAdherenceMeasures\
Adherence =~ SpecAdherence + CodeAdherence + TestAdherence + OpsAdherence\
\
SpecCriticality =~ SpecContextFactors\
CodeCriticality =~ CodeContextFactors\
TestCriticality =~ TestContextFactors\
OpsCriticality =~ OpsContextFactors\
Criticality =~ SpecCriticality + CodeCriticality + TestCriticality + OpsCriticality\
SpecOutcomes =~ SpecSecurityOutcomes\
CodeOutcomes =~ CodeSecurityOutcomes\
TestOutcomes =~ TestSecurityOutcomes\
OpsOutcomes =~ OpsSecurityOutcomes\
Outcomes =~ SpecOutcomes + CodeOutcomes + TestOutcomes + OpsOutcomes\
Outcomes ~ Criticality + Adherence\
Criticality ~  Adherence'\
\
model.one <- '\
SpecAdherence =~ SpecAdherenceMeasures\
CodeAdherence =~ CodeAdherenceMesures\
TestAdherence =~ TestAdherenceMeasures\
OpsAdherence =~ OpAdherenceMeasures\
Adherence =~ SpecAdherence + CodeAdherence + TestAdherence + OpsAdherence\
\
Criticality =~ SpecContextFactors + CodeContextFactors + TestContextFactors + OpsContextFactors\
Outcomes =~ SpecSecurityOutcomes + CodeSecurityOutcomes + TestSecurityOutcomes + OpsSecurityOutcomes\
Outcomes ~ Criticality + Adherence\
Criticality ~  Adherence'\
\
model.adherence <- '\
Specification =~ SpecAdherenceMeasures + SpecContextFactors \
Coding =~ CodeAdherenceMesures + Specification + CodeContextFactors\
Testing =~ TestAdherenceMeasures + Coding + Specification + TestContextFactors\
Operations =~ OpAdherenceMeasures + Testing + OpsContextFactors\
\
Criticality =~ SpecContextFactors + CodeContextFactors + TestContextFactors + OpsContextFactors\
Adherence =~ SpecAdherence + CodeAdherence + TestAdherence + OpsAdherence\
\
Outcomes =~ Operations\
Outcomes ~ Criticality + Adherence\
Criticality ~  Adherence'\
\
\
\
## 9/26\
\
# git clone https://github.com/linuxfoundation/cii-census\
\
ciiraw <- read.csv("~/Dropbox/github/cii-census/results.csv")\
ciiraw$DevChurnAdh <-  ciiraw$total_contributor_count / ciiraw$total_code_lines\
ciicooked <- ciiraw[!is.na(ciiraw$DevChurnAdh),]\
\
ciicooked$CVE <- ciicooked$CVE_since_2010\
ciicooked$RiskIndex <- ciicooked$risk_index\
# ciicooked$CVE <- ciicooked$CVE_since_2010/100\
\
library(lavaan)\
\
fit <- sem(model.mini,data=ciicooked)\
summary(fit,standardized=TRUE)\
fitMeasures(fit,c("chisq","rmsea","cfi","srmr","aic","nfi","tli"))\
semPaths(fit,"std",title=FALSE,layout="tree",sizeLat=3,sizeMan=3,nCharNodes=5,structural=FALSE)\
resid(fit, type = "standardized")\
\
# factor analysis\
# princomp(na.omit(ciiraw[-c(1,2,3,4,5,7,8,9,10,11,12,14,16,17,18,19,20,21,23,24,29,30)]),cor=TRUE)\
\
\
}